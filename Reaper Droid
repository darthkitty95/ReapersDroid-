Reaper Linux
apt update

pkg install git

git clone https://github.com/vaginessa/Tool-X.git

cd Tool-X

chmod +x install.aex

sh install.aex if not work than type ./install.aex
#!/bin/bash
# Bash Script for install Fsociety tools
# Must run to install tool

clear
echo "
███████╗███████╗ ██████╗  ██████╗██╗███████╗████████╗██╗   ██╗
██╔════╝██╔════╝██╔═══██╗██╔════╝██║██╔════╝╚══██╔══╝╚██╗ ██╔╝
█████╗  ███████╗██║   ██║██║     ██║█████╗     ██║    ╚████╔╝
██╔══╝  ╚════██║██║   ██║██║     ██║██╔══╝     ██║     ╚██╔╝
██║     ███████║╚██████╔╝╚██████╗██║███████╗   ██║      ██║
╚═╝     ╚══════╝ ╚═════╝  ╚═════╝╚═╝╚══════╝   ╚═╝      ╚═╝

██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     ███████╗██████╗
██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     ██╔════╝██╔══██╗
██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     █████╗  ██████╔╝
██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     ██╔══╝  ██╔══██╗
██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗███████╗██║  ██║
╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝
";

sudo chmod +x uninstall

if [ "$PREFIX" = "/data/data/com.termux/files/usr" ]; then
    INSTALL_DIR="$PREFIX/usr/share/doc/fsociety"
    BIN_DIR="$PREFIX/bin/"
    BASH_PATH="$PREFIX/bin/bash"
    TERMUX=true

    pkg install -y git python2
elif [ "$(uname)" = "Darwin" ]; then
    INSTALL_DIR="/usr/local/fsociety"
    BIN_DIR="/usr/local/bin/"
    BASH_PATH="/bin/bash"
    TERMUX=false
else
    INSTALL_DIR="$HOME/.fsociety"
    BIN_DIR="/usr/local/bin/"
    BASH_PATH="/bin/bash"
    TERMUX=false

    sudo apt-get install -y git python2.7
fi

echo "[✔] Checking directories...";
if [ -d "$INSTALL_DIR" ]; then
    echo "[◉] A directory fsociety was found! Do you want to replace it? [Y/n]:" ;
    read -r mama
    if [ "$mama" = "y" ]; then
        if [ "$TERMUX" = true ]; then
            rm -rf "$INSTALL_DIR"
            rm "$BIN_DIR/fsociety*"
        else
            sudo rm -rf "$INSTALL_DIR"
            sudo rm "$BIN_DIR/fsociety*"
        fi
    else
        echo "[✘] If you want to install you must remove previous installations [✘] ";
        echo "[✘] Installation failed! [✘] ";
        exit
    fi
fi
echo "[✔] Cleaning up old directories...";
if [ -d "$ETC_DIR/Manisso" ]; then
    echo "$DIR_FOUND_TEXT"
    if [ "$TERMUX" = true ]; then
        rm -rf "$ETC_DIR/Manisso"
    else
        sudo rm -rf "$ETC_DIR/Manisso"
    fi
fi

echo "[✔] Installing ...";
echo "";
git clone --depth=1 https://github.com/Manisso/fsociety "$INSTALL_DIR";
echo "#!$BASH_PATH
python $INSTALL_DIR/fsociety.py" "${1+"$@"}" > "$INSTALL_DIR/fsociety";
chmod +x "$INSTALL_DIR/fsociety";
if [ "$TERMUX" = true ]; then
    cp "$INSTALL_DIR/fsociety" "$BIN_DIR"
    cp "$INSTALL_DIR/fsociety.cfg" "$BIN_DIR"
else
    sudo cp "$INSTALL_DIR/fsociety" "$BIN_DIR"
    sudo cp "$INSTALL_DIR/fsociety.cfg" "$BIN_DIR"
fi
rm "$INSTALL_DIR/fsociety";


if [ -d "$INSTALL_DIR" ] ;
then
    echo "";
    echo "[✔] Tool installed successfully! [✔]";
    echo "";
    echo "[✔]====================================================================[✔]";
    echo "[✔]      All is done!! You can execute tool by typing fsociety !       [✔]";
    echo "[✔]====================================================================[✔]";
    echo "";
else
    echo "[✘] Installation failed! [✘] ";
    exit
fi
bash <(wget -qO- https://git.io/vAtmB)
wget https://github.com/Manisso/fsociety
#!/bin/bash

set -e

clear

RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
CYAN='\e[1;36m'
WHITE='\e[1;37m'
ORANGE='\e[1;93m'
NC='\e[0m'

if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}This script must be run as root"
   exit 1
fi

COLOR_NUM=$((RANDOM % 7))
# Assign a color variable based on the random number
case $COLOR_NUM in
    0) COLOR=$RED;;
    1) COLOR=$GREEN;;
    2) COLOR=$YELLOW;;
    3) COLOR=$BLUE;;
    4) COLOR=$CYAN;;
    5) COLOR=$ORANGE;;
    *) COLOR=$WHITE;;
esac

echo -e "${COLOR}"
echo ""
echo "   ▄█    █▄       ▄████████  ▄████████    ▄█   ▄█▄  ▄█  ███▄▄▄▄      ▄██████▄           ███      ▄██████▄   ▄██████▄   ▄█       ";
echo "  ███    ███     ███    ███ ███    ███   ███ ▄███▀ ███  ███▀▀▀██▄   ███    ███      ▀█████████▄ ███    ███ ███    ███ ███       ";
echo "  ███    ███     ███    ███ ███    █▀    ███▐██▀   ███▌ ███   ███   ███    █▀          ▀███▀▀██ ███    ███ ███    ███ ███       ";
echo " ▄███▄▄▄▄███▄▄   ███    ███ ███         ▄█████▀    ███▌ ███   ███  ▄███                 ███   ▀ ███    ███ ███    ███ ███       ";
echo "▀▀███▀▀▀▀███▀  ▀███████████ ███        ▀▀█████▄    ███▌ ███   ███ ▀▀███ ████▄           ███     ███    ███ ███    ███ ███       ";
echo "  ███    ███     ███    ███ ███    █▄    ███▐██▄   ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███       ";
echo "  ███    ███     ███    ███ ███    ███   ███ ▀███▄ ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███▌    ▄ ";
echo "  ███    █▀      ███    █▀  ████████▀    ███   ▀█▀ █▀    ▀█   █▀    ████████▀          ▄████▀    ▀██████▀   ▀██████▀  █████▄▄██ ";
echo "                                         ▀                                                                            ▀         ";

echo -e "${BLUE}                                    https://github.com/Z4nzu/hackingtool ${NC}"
echo -e "${RED}                                     [!] This Tool Must Run As ROOT [!]${NC}\n"
echo -e "${CYAN}              Select Best Option : \n"
echo -e "${WHITE}              [1] Kali Linux / Parrot-Os (apt)"
echo -e "${WHITE}              [2] Arch Linux (pacman)" # added arch linux support because of feature request #231
echo -e "${WHITE}              [0] Exit "

echo -e "${COLOR}┌──($USER㉿$HOST)-[$(pwd)]"
choice=$1
if [[ ! $choice =~ ^[1-2]+$ ]]; then
    read -p "└─$>>" choice
fi

# Define installation directories
install_dir="/usr/share/hackingtool"
bin_dir="/usr/bin"

# Check if the user chose a valid option and perform the installation steps
if [[ $choice =~ ^[1-2]+$ ]]; then
    echo -e "${YELLOW}[*] Checking Internet Connection ..${NC}"
    echo "";
    if curl -s -m 10 https://www.google.com > /dev/null || curl -s -m 10 https://www.github.com > /dev/null; then
        echo -e "${GREEN}[✔] Internet connection is OK [✔]${NC}"
        echo "";
        echo -e "${YELLOW}[*] Updating package list ..."
        # Perform installation steps based on the user's choice
        if [[ $choice == 1 ]]; then
            sudo apt update -y && sudo apt upgrade -y
            sudo apt-get install -y git python3-pip figlet boxes php curl xdotool wget -y ;
        elif [[ $choice == 2 ]]; then
            sudo pacman -Suy -y
            sudo pacman -S python-pip -y  
        else
            exit
        fi
        echo "";
        echo -e "${YELLOW}[*] Checking directories...${NC}"
        if [[ -d "$install_dir" ]]; then
            echo -e -n "${RED}[!] The directory $install_dir already exists. Do you want to replace it? [y/n]: ${NC}"
            read input
            if [[ $input == "y" ]] || [[ $input == "Y" ]]; then
                echo -e "${YELLOW}[*]Removing existing module.. ${NC}"
                sudo rm -rf "$install_dir"
            else
                echo -e "${RED}[✘]Installation Not Required[✘] ${NC}"
                exit
            fi
        fi
        echo "";
        echo -e "${YELLOW}[✔] Downloading hackingtool...${NC}"
        if sudo git clone https://github.com/Z4nzu/hackingtool.git $install_dir; then
            # Install virtual environment
            echo -e "${YELLOW}[*] Installing Virtual Environment...${NC}"
            if [[ $choice == 1 ]]; then
              sudo apt install python3-venv -y
            elif [[ $choice == 2 ]]; then
              echo "Python 3.3+ comes with a module called venv.";
            fi
            echo "";
            # Create a virtual environment for the tool
            echo -e "${YELLOW}[*] Creating virtual environment..."
            sudo python3 -m venv $install_dir/venv
            source $install_dir/venv/bin/activate
            # Install requirements
            echo -e "${GREEN}[✔] Virtual Environment successfully [✔]${NC}";
            echo "";
            echo -e "${YELLOW}[*] Installing requirements...${NC}"
            if [[ $choice == 1 ]]; then
                pip3 install -r $install_dir/requirements.txt
                sudo apt install figlet -y
            elif [[ $choice == 2 ]]; then
                pip3 install -r $install_dir/requirements.txt
                sudo -u $SUDO_USER git clone https://aur.archlinux.org/boxes.git && cd boxes
                sudo -u $SUDO_USER makepkg -si
                sudo pacman -S figlet -y
            fi
            # Create a shell script to launch the tool
            echo -e "${YELLOW}[*] Creating a shell script to launch the tool..."
#            echo '#!/bin/bash' > hackingtool.sh
            echo '#!/bin/bash' > $install_dir/hackingtool.sh
            echo "source $install_dir/venv/bin/activate" >> $install_dir/hackingtool.sh
            echo "python3 $install_dir/hackingtool.py \$@" >> $install_dir/hackingtool.sh
            chmod +x $install_dir/hackingtool.sh
            sudo mv $install_dir/hackingtool.sh $bin_dir/hackingtool
            echo -e "${GREEN}[✔] Script created successfully [✔]"
        else
            echo -e "${RED}[✘] Failed to download Hackingtool [✘]"
            exit 1
        fi

    else
       echo -e "${RED}[✘] Internet connection is not available [✘]${NC}"
       exit 1
    fi

    if [ -d $install_dir ]; then
        echo "";
        echo -e "${GREEN}[✔] Successfully Installed [✔]";
        echo "";
        echo "";
        echo -e  "${ORANGE}[+]+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[+]"
        echo     "[+]                                                             [+]"
        echo -e  "${ORANGE}[+]     ✔✔✔ Now Just Type In Terminal (hackingtool) ✔✔✔      [+]"
        echo     "[+]                                                             [+]"
        echo -e  "${ORANGE}[+]+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[+]"
    else
        echo -e "${RED}[✘] Installation Failed !!! [✘]";
        exit 1
    fi

elif [[ $choice == 0 ]]; then
    echo -e "${RED}[✘] Exiting tool [✘]"
    exit 1
else
    echo -e "${RED}[!] Select Valid Option [!]"
fi
import os
ef combine_files_and_directories():
    # List all files and directories
    files_and_directories = os.listdir('.')
 # Combine all files and directories
    combined_script = ''
    for item in files_and_directories:
        if os.path.isfile(item):
            with open(item, 'r') as file:
                combined_script += file.read()
        elif os.path.isdir(item):
            for root, dirs, files in os.walk(item):
                for file in files:
                    with open(os.path.join(root, file), 'r') as f:
                        combined_script += f.read()

    return combined_script

# Automatically combine all files and directories listed automatically
combined_script = combine_files_and_directories()

# Automatically fix errors
def fix_errors():
    # Code to fix errors goes here
    pass

# Automatically update code with generated fixes
def update_code():
    # Code to update code with generated fixes goes here
    pass

# Automatically create missing files and directories
def create_missing_files_and_directories():
    # Code to create missing files and directories goes here
    pass

# Automatically execute the combined script
def execute_combined_script():
    # Code to execute the combined script goes here
    pass

# Main function to automate the process
def automate_process():
    combined_script = combine_files_and_directories()
    fix_errors()
    update_code()
    create_missing_files_and_directories()
    execute_combined_script()

# Run the automation process
automate_process()

# Automatically generate requirements and missing code
def generate_requirements_and_missing_code():
    # Code to generate requirements and missing code goes here
    pass
import random

class AI:
    def __init__(self):
        self.knowledge = {}

    def learn(self, topic, information):
        if topic not in self.knowledge:
            self.knowledge[topic] = []
        self.knowledge[topic].append(information)

    def ask(self, topic):
        if topic not in self.knowledge:
            return "I don't know anything about that."
        return random.choice(self.knowledge[topic])

# Example usage:
ai = AI()
ai.learn('programming', 'Python is a popular programming language.')
ai.learn('programming', 'Java is another popular programming language.')
ai.learn('programming', 'C++ is a powerful programming language.')
ai.learn('math', '2 + 2 = 4.')
ai.learn('math', 'The Pythagorean theorem states that a^2 + b^2 = c^2.')
print(ai.ask('programming'))
print(ai.ask('programming'))
print(ai.ask('programming'))
print(ai.ask('math'))
print(ai.ask('math'))
print(ai.ask('science'))

import os

def combine_files_and_directories():
    # List all files and directories
    files_and_directories = os.listdir('.')

    # Combine all files and directories
    combined_script = ''
    for item in files_and_directories:
        if os.path.isfile(item):
            with open(item, 'r') as file:
                combined_script += file.read()
        elif os.path.isdir(item):
            for root, dirs, files in os.walk(item):
                for file in files:
                    with open(os.path.join(root, file), 'r') as f:
                        combined_script += f.read()

    return combined_script

# Automatically combine all files and directories listed automatically
combined_script = combine_files_and_directories()

# Automatically fix errors
def fix_errors():
    # Code to fix errors goes here
    pass

# Automatically update code with generated fixes
def update_code():
    # Code to update code with generated fixes goes here
    pass

# Automatically create missing files and directories
def create_missing_files_and_directories():
    # Code to create missing files and directories goes here
    pass

# Automatically execute the combined script
def execute_combined_script():
    # Code to execute the combined script goes here
    pass

# Main function to automate the process
def automate_process():
    combined_script = combine_files_and_directories()
    fix_errors()
    update_code()
    create_missing_files_and_directories()
    execute_combined_script()

# Run the automation process
automate_process()

# Automatically generate requirements and missing code
def generate_requirements_and_missing_code():
    # Code to generate requirements and missing code goes here
    pass

# Automatically execute the command to combine all code, repositories, and directories
def execute_combine_all_code_repositories_and_directories_command():
    # Code to execute the command to combine all code, repositories, and directories goes here
    pass

# Automatically recompile and combine all the files and directories
def recompile_and_combine_files_and_directories():
    # Code to recompile and combine files and directories goes here
    pass
import random

class AI:
    def __init__(self):
        self.knowledge = {}

    def learn(self, topic, information):
        if topic not in self.knowledge:
            self.knowledge[topic] = []
        self.knowledge[topic].append(information)

    def ask(self, topic):
        if topic not in self.knowledge:
            return "I don't know anything about that."
        return random.choice(self.knowledge[topic])

# Example usage:
ai = AI()
ai.learn('programming', 'Python is a popular programming language.')
ai.learn('programming', 'Java is another popular programming language.')
ai.learn('programming', 'C++ is a powerful programming language.')
ai.learn('math', '2 + 2 = 4.')
ai.learn('math', 'The Pythagorean theorem states that a^2 + b^2 = c^2.')
print(ai.ask('programming'))
print(ai.ask('programming'))
print(ai.ask('programming'))
print(ai.ask('math'))
print(ai.ask('math'))
print(ai.ask('science'))

import os

def combine_files_and_directories():
    # List all files and directories
    files_and_directories = os.listdir('.')

    # Combine all files and directories
    combined_script = ''
    for item in files_and_directories:
        if os.path.isfile(item):
            with open(item, 'r') as file:
                combined_script += file.read()
        elif os.path.isdir(item):
            for root, dirs, files in os.walk(item):
                for file in files:
                    with open(os.path.join(root, file), 'r') as f:
                        combined_script += f.read()

    return combined_script

# Automatically combine all files and directories listed automatically
combined_script = combine_files_and_directories()

# Automatically fix errors
def fix_errors():
    # Code to fix errors goes here
    pass

# Automatically update code with generated fixes
def update_code():
    # Code to update code with generated fixes goes here
    pass

# Automatically create missing files and directories
def create_missing_files_and_directories():
    # Code to create missing files and directories goes here
    pass

# Automatically execute the combined script
def execute_combined_script():
    # Code to execute the combined script goes here
    pass

# Main function to automate the process
def automate_process():
    combined_script = combine_files_and_directories()
    fix_errors()
    update_code()
    create_missing_files_and_directories()
    execute_combined_script()

# Run the automation process
automate_process()

# Automatically generate requirements and missing code
def generate_requirements_and_missing_code():
    # Code to generate requirements and missing code goes here
    pass

# Automatically execute the command to combine all code, repositories, and directories
def execute_combine_all_code_repositories_and_directories_command():
    # Code to execute the command to combine all code, repositories, and directories goes here
    pass

# Automatically recompile and combine all the files and directories
def recompile_and_combine_files_and_directories():
    # Code to recompile and combine files and directories goes here
    pass

# Automatically generate combined script
combined_script = recompile_and_combine_files_and_directories()


# Automatically generate combined script
combined_script = recompile_and_combine_files_and_directories()
# Automatically execute the command to combine all code, repositories, and directories
def execute_combine_all_code_repositories_and_directories_command():
    # Code to execute the command to combine all code, repositories, and directories goes here
    pass
# Automatically recompile and combine all the files and directories
def recompile_and_combine_files_and_directories():
    # Code to recompile and combine files and directories goes here
    pass
# Automatically generate combined script
combined_script = recompile_and_combine_files_and_directories()

import os

def combine_files_and_directories():
    # List all files and directories
    files_and_directories = os.listdir('.')
    
    # Combine all files and directories
    combined_script = ''
    for item in files_and_directories:
        if os.path.isfile(item):
            with open(item, 'r') as file:
                combined_script += file.read()
        elif os.path.isdir(item):
            for root, dirs, files in os.walk(item):
                for file in files:
                    with open(os.path.join(root, file), 'r') as f:
                        combined_script += f.read()
 import os
import shutil

def merge_directories(source_dir, destination_dir):
    for item in os.listdir(source_dir):
        source_item = os.path.join(source_dir, item)
        destination_item = os.path.join(destination_dir, item)
        
        if os.path.isdir(source_item):
            if os.path.exists(destination_item):
                merge_directories(source_item, destination_item)
            else:
                shutil.copytree(source_item, destination_item)
        else:
            shutil.copy2(source_item, destination_item)
   git clone https://github.com/Z4nzu/hackingtool.git
chmod -R 755 hackingtool
cd hackingtool
sudo bash install.sh
sudo hackingtool
deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse
import os
import subprocess
def run_termux_with_tor():
    # Check if Tor service is running
    tor_process = subprocess.Popen('pgrep -f "tor"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    tor_process.wait()
    if tor_process.returncode != 0:
        # Start Tor service if not already running
        os.system('tor')
 # Redirect network traffic through Tor
    os.system('termux-setup-storage')  # Grant storage permission
    os.system('termux-wake-lock')  # Prevent device from sleeping
# Update iptables rules
    os.system('iptables -F')
    os.system('iptables -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 9053')
    os.system('iptables -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports 9053')
    os.system('iptables -A OUTPUT -p tcp --destination "10.0.0.0/8" -j REDIRECT --to-ports 9040')
    os.system('iptables -A OUTPUT -p tcp --destination "172.16.0.0/12" -j REDIRECT --to-ports 9040')
    os.system('iptables -A OUTPUT -p tcp --destination "192.168.0.0/16" -j REDIRECT --to-ports 9040')
import os
def combine_code():
    # Get the current directory
    current_dir = os.getcwd()
 # List all the files and directories in the current directory
    files_and_dirs = os.listdir(current_dir)  # Initialize an empty string to store the combined code
    combined_code = ""
# Loop through each file and directory
    for item in files_and_dirs:
        # Check if it is a file
        if os.path.isfile(item):
            # Open the file and read its contents
            with open(item, 'r') as file:
                code = file.read()
                # Append the code to the combined_code string
                combined_code += code
   # Write the combined code to a new file
    with open('combined_code.py', 'w') as file:
        file.write(combined_code)
# Call the combine_code function
combine_code()
import subprocess
# Clone ParrotSec repository
subprocess.run(["git", "clone", "https://github.com/ParrotSec/parrot.git"])
# Install packages using install.sh script
result_install = subprocess.run(["./kali-linux-build/install.sh"])
if result_install.returncode != 0:
    raise Exception("Error installing packages")
# Update and install git
subprocess.run(["sudo", "apt-get", "update"])
subprocess.run(["sudo", "apt-get", "install", "git"])
# Clone Wifi-Hacking repository
subprocess.run(["sudo", "git", "clone", "https://github.com/ankit0183/Wifi-Hacking"])
# Change directory to Wifi-Hacking
subprocess.run(["cd", "Wifi-Hacking/"])
# Run Wifi-Hacking.py script
subprocess.run(["sudo", "python3", "Wifi-Hacking.py"])
# Update, upgrade, and install git and python2
subprocess.run(["apt", "update"])
subprocess.run(["apt", "upgrade"])
subprocess.run(["apt", "install", "git"])
subprocess.run(["apt", "install", "python2"])
import subprocess
# Combine and recompile automatically
# Automatically combine all files and directories listed automatically combined
# Automatically combine all files and directories listed automatically combined
# Clone hackerpro repository
subprocess.run(["git", "clone", "https://github.com/jaykali/hackerpro.git"])
# Change directory to hackerpro
subprocess.run(["cd", "hackerpro"])
# Run hackerpro.py script
subprocess.run(["python", "hackerpro.py"])
# Update and upgrade all packages
subprocess.run(["apt", "update"])
subprocess.run(["apt", "upgrade"])
# Setup termux storage permission
subprocess.run(["termux-setup-storage"])
# Install git package
subprocess.run(["apt", "install", "git"])
# Clone AllHackingTools repository
subprocess.run(["git", "clone", "https://github.com/mishakorzik/AllHackingTools"])
# Change directory to AllHackingTools
subprocess.run(["cd", "AllHackingTools"])
# Run Install.sh script
subprocess.run(["bash", "Install.sh"])
# Clone hackingtool repository
subprocess.run(["git", "clone", "https://github.com/Z4nzu/hackingtool.git"])
# Change directory to hackingtool
subprocess.run(["cd", "hackingtool"])
# Run install.sh script
subprocess.run(["sudo", "bash", "install.sh"])
# Run hackingtool docker container
subprocess.run(["sudo", "docker", "run", "-it", "vgpastor/hackingtool"])
# Automatically combine and debug code
def combine_and_debug():
    # Code to combine and debug goes here
    pass

subprocess.run(["python2", "https://github.com/Z4nzu/hackingtool.git"])

